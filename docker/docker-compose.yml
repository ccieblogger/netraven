# This file defines the production deployment configuration for NetRaven.
# It includes services for the database, API, scheduler, gateway, and frontend.

version: '3.8'

services:
  # PostgreSQL database service
  postgres:
    image: postgres:14-alpine
    volumes:
      - postgres-data:/var/lib/postgresql/data/
      - ../scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ../scripts/backup_db.sh:/usr/local/bin/backup_db.sh
      - ./backups:/backups
    ports:
      - "5432:5432"
    restart: unless-stopped
    environment:
      - POSTGRES_USER=netraven
      - POSTGRES_PASSWORD=netraven
      - POSTGRES_DB=netraven
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U netraven"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Make the backup script executable when the container starts
    command: >
      bash -c "chmod +x /usr/local/bin/backup_db.sh
      && docker-entrypoint.sh postgres"
    networks:
      - netraven-network

  # Backend API service
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
      args:
        - NETRAVEN_ENV=${NETRAVEN_ENV:-prod}
    environment:
      - DATABASE_URL=postgresql://netraven:netraven@postgres:5432/netraven
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=netraven
      - POSTGRES_PASSWORD=netraven
      - POSTGRES_DB=netraven
      - TOKEN_SECRET_KEY=${TOKEN_SECRET_KEY:-netraven-dev-secret-key}
      - TOKEN_EXPIRY_HOURS=${TOKEN_EXPIRY_HOURS:-24}
      - NETRAVEN_ENV=${NETRAVEN_ENV:-prod}
      - GATEWAY_URL=http://device_gateway:8001
      - CORS_ORIGINS=http://localhost:8080,http://127.0.0.1:8080,http://localhost,http://127.0.0.1,http://nginx,http://netraven.local,*
      - ALLOW_CREDENTIALS=true
      - NETMIKO_LOG_DIR=/app/data/netmiko_logs
      - NETMIKO_PRESERVE_LOGS=${NETMIKO_PRESERVE_LOGS:-false}
      - SERVICE_TYPE=api
    volumes:
      - api-data:/app/data
      - ./test-artifacts:/app/test-artifacts
      - ./config.yml:/app/config.yml
      - netraven_netmiko_logs:/app/data/netmiko_logs
      - ../netraven:/app/netraven
      - ../scripts:/app/scripts
    ports:
      - "0.0.0.0:8000:8000"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - netraven-network
    # Initialize database and start API server
    entrypoint: ["/bin/bash", "-c", "python -u /app/scripts/initialize_schema.py && /app/docker/entrypoint.sh"]

  # Scheduler service
  scheduler:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
      args:
        - NETRAVEN_ENV=${NETRAVEN_ENV:-test}
    volumes:
      - ./:/app
      - logs_data:/app/logs
      - netraven_netmiko_logs:/app/data/netmiko_logs
    working_dir: /app
    command: bash -c "mkdir -p /app/data/netmiko_logs && python -m netraven.jobs.scheduler"
    environment:
      - API_URL=http://api:8000
      - NETRAVEN_ENV=${NETRAVEN_ENV:-test}
      - NETMIKO_LOG_DIR=/app/data/netmiko_logs
      - NETMIKO_PRESERVE_LOGS=${NETMIKO_PRESERVE_LOGS:-false}
    depends_on:
      postgres:
        condition: service_healthy
      api:
        condition: service_healthy
      device_gateway:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - netraven-network

  # Device Gateway service
  device_gateway:
    build:
      context: ..
      dockerfile: docker/Dockerfile.gateway
      args:
        - NETRAVEN_ENV=${NETRAVEN_ENV:-prod}
    ports:
      - "8001:8001"
    volumes:
      - ../netraven:/app/netraven
      - token_data:/app/tokens
      - ./config.yml:/app/config.yml
      - netraven_netmiko_logs:/app/data/netmiko_logs
      - ../scripts:/app/scripts
    environment:
      - API_URL=http://api:8000
      - NETRAVEN_ENV=${NETRAVEN_ENV:-prod}
      - NETMIKO_LOG_DIR=/app/data/netmiko_logs
      - NETMIKO_PRESERVE_LOGS=${NETMIKO_PRESERVE_LOGS:-false}
      - SERVICE_TYPE=gateway
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    security_opt:
      - no-new-privileges:true
    networks:
      - netraven-network

  # Frontend service
  frontend:
    build:
      context: ./netraven/web/frontend
      dockerfile: Dockerfile
    volumes:
      - ./netraven/web/frontend:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "8080:8080"
    depends_on:
      - api
      - device_gateway
    user: netraven
    healthcheck:
      test: ["CMD-SHELL", "wget --spider --quiet --tries=1 http://0.0.0.0:8080 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    environment:
      - NODE_ENV=development
      # Internal name for container-to-container access, will be transformed for browser access
      - VUE_APP_API_URL=http://api:8000
    networks:
      - netraven-network

  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - api
      - frontend
    networks:
      - netraven-network

  key-rotation:
    build:
      context: ..
      dockerfile: docker/key-rotation.Dockerfile
      args:
        - NETRAVEN_ENV=${NETRAVEN_ENV:-prod}
    volumes:
      - key_data:/app/data/keys
      - ./config:/app/config
    restart: on-failure:5
    environment:
      - NETRAVEN_ENV=${NETRAVEN_ENV:-prod}
      - NETRAVEN_ENCRYPTION_KEY=${NETRAVEN_ENCRYPTION_KEY:-netraven-dev-key}
      - CONFIG_FILE=config/key_rotation.yaml
    networks:
      - netraven-network

volumes:
  frontend_node_modules:
  postgres-data:
  logs_data:
  token_data:
  api-data:
  key_data:
  netraven_netmiko_logs:

networks:
  netraven-network:
    driver: bridge