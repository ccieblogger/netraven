# This Dockerfile is used to build the Frontend container for NetRaven.
# The Frontend provides a Vue.js-based user interface for the application.

# Stage 1: Build stage with dependencies
FROM python:3.11-slim as builder

WORKDIR /build-app

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy only requirements first for caching
COPY docker/requirements.txt .

# Install Python dependencies into a virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
RUN pip install --no-cache-dir -r requirements.txt

# --- 

# Stage 2: Final runtime stage
FROM python:3.11-slim as final

WORKDIR /app

# Install runtime dependencies (only if absolutely necessary, e.g., libpq5 for psycopg2)
# Check if psycopg2 binary needs it, slim might have it
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Copy application code (be specific)
COPY netraven /app/netraven
COPY alembic /app/alembic
COPY alembic.ini /app/alembic.ini
# Add other necessary top-level files if any (e.g., specific scripts needed at runtime)

# Create non-root user
RUN useradd -m -s /bin/bash -u 1000 netraven 
# Create log and config directories and set ownership
# Config dir might be mounted externally, but create it in case
RUN mkdir -p /app/logs /app/config && \
    chown -R netraven:netraven /app /opt/venv

# Set environment variables
ENV PATH="/opt/venv/bin:$PATH"
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    NETRAVEN_CONFIG_DIR=/app/config \
    # NETRAVEN_CONFIG=/app/config/netraven.yaml # Keep this if needed, or rely on dir
    NETRAVEN_LOG_LEVEL=INFO

# Switch to non-root user
USER netraven

# Expose port
EXPOSE 8000

# Health check (remains the same for now)
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Run the application
# Use gunicorn for potentially better process management in production
# CMD ["uvicorn", "netraven.web.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]
CMD ["gunicorn", "-w", "4", "-k", "uvicorn.workers.UvicornWorker", "netraven.web.main:app", "--bind", "0.0.0.0:8000"]