"""
Initial schema definition

NOTE FOR DEVELOPERS:
- This is the *pre-release* initial schema migration for NetRaven.
- All indexes are created *only* via op.create_index below, NOT via index=True in sa.Column definitions.
- Do NOT add further migrations until after customer deployment. Any schema changes before release should be made by editing this file directly and resetting the database.
- This approach avoids Alembic/SQLAlchemy index duplication issues and ensures a clean, reliable initial schema for containerized deployments.
- After customer deployment, follow standard Alembic migration practices for schema changes.

Revision ID: a3992da91329
Revises: 
Create Date: 2025-04-06 13:05:23.493224

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a3992da91329'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('credentials',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('last_used', sa.DateTime(timezone=True), nullable=True),
    sa.Column('success_rate', sa.Float(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('is_system', sa.Boolean(), nullable=True, server_default=sa.text('false')),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('devices',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('hostname', sa.String(), nullable=False, unique=True),
    sa.Column('ip_address', sa.String(), nullable=False, unique=True),
    sa.Column('device_type', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('port', sa.Integer(), nullable=True, server_default='22'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_seen', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('ip_address')
    )
    op.create_index(op.f('ix_devices_hostname'), 'devices', ['hostname'], unique=True)
    op.create_table('system_settings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('key', sa.String(), nullable=False),
    sa.Column('value', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_system_settings_key'), 'system_settings', ['key'], unique=True)
    op.create_table('tags',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('type', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tags_name'), 'tags', ['name'], unique=True)
    op.create_table('credential_tag_association',
    sa.Column('credential_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['credential_id'], ['credentials.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('credential_id', 'tag_id')
    )
    op.create_table('device_configurations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('device_id', sa.Integer(), nullable=False),
    sa.Column('config_data', sa.Text(), nullable=False),
    sa.Column('retrieved_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('config_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('device_tag_association',
    sa.Column('device_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['device_id'], ['devices.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('device_id', 'tag_id')
    )
    op.create_table('jobs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('job_type', sa.String(), nullable=False, server_default='backup'),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=False, server_default='PENDING'),
    sa.Column('scheduled_for', sa.DateTime(timezone=True), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_enabled', sa.Boolean(), nullable=True, server_default=sa.sql.expression.true()),
    sa.Column('is_system_job', sa.Boolean(), nullable=True, server_default=sa.sql.expression.false()),
    sa.Column('schedule_type', sa.String(), nullable=True),
    sa.Column('interval_seconds', sa.Integer(), nullable=True),
    sa.Column('cron_string', sa.String(), nullable=True),
    sa.Column('device_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.ForeignKeyConstraint(['device_id'], ['devices.id'], ondelete='SET NULL'),
    )
    op.create_index(op.f('ix_jobs_is_enabled'), 'jobs', ['is_enabled'], unique=False)
    op.create_index(op.f('ix_jobs_name'), 'jobs', ['name'], unique=False)
    op.create_index(op.f('ix_jobs_scheduled_for'), 'jobs', ['scheduled_for'], unique=False)
    op.create_index(op.f('ix_jobs_status'), 'jobs', ['status'], unique=False)
    op.create_index('ix_jobs_device_id', 'jobs', ['device_id'])
    op.create_table('job_tags',
    sa.Column('job_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('job_id', 'tag_id')
    )
    op.create_table('logs',
        sa.Column('id', sa.Integer(), primary_key=True),
        sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('log_type', sa.String(length=32), nullable=False),
        sa.Column('level', sa.String(length=16), nullable=False),
        sa.Column('job_id', sa.Integer(), sa.ForeignKey('jobs.id', ondelete='CASCADE'), nullable=True),
        sa.Column('device_id', sa.Integer(), sa.ForeignKey('devices.id', ondelete='CASCADE'), nullable=True),
        sa.Column('job_type_id', sa.Integer(), sa.ForeignKey('job_type.id'), nullable=True),
        sa.Column('source', sa.String(length=64), nullable=True),
        sa.Column('message', sa.Text(), nullable=False),
        sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    )
    op.create_index('idx_logs_job_id', 'logs', ['job_id'])
    op.create_index('idx_logs_device_id', 'logs', ['device_id'])
    op.create_index('idx_logs_log_type', 'logs', ['log_type'])
    op.create_index('idx_logs_level', 'logs', ['level'])
    op.create_index('idx_logs_timestamp', 'logs', ['timestamp'])
    op.create_index('idx_logs_job_type_id', 'logs', ['job_type_id'])
    op.create_table('users',
        sa.Column('id', sa.Integer(), primary_key=True),
        sa.Column('username', sa.String(), nullable=False, unique=True),
        sa.Column('email', sa.String(), nullable=False, unique=True),
        sa.Column('hashed_password', sa.String(), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=False, server_default=sa.sql.expression.true()),
        sa.Column('role', sa.String(), nullable=False, server_default='user'),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_logs_job_id', table_name='logs')
    op.drop_index('idx_logs_device_id', table_name='logs')
    op.drop_index('idx_logs_log_type', table_name='logs')
    op.drop_index('idx_logs_level', table_name='logs')
    op.drop_index('idx_logs_timestamp', table_name='logs')
    op.drop_index('idx_logs_job_type_id', table_name='logs')
    op.drop_table('logs')
    op.drop_table('job_tags')
    op.drop_index(op.f('ix_jobs_status'), table_name='jobs')
    op.drop_index(op.f('ix_jobs_scheduled_for'), table_name='jobs')
    op.drop_index(op.f('ix_jobs_name'), table_name='jobs')
    op.drop_index(op.f('ix_jobs_is_enabled'), table_name='jobs')
    op.drop_index('ix_jobs_device_id', table_name='jobs')
    op.drop_table('jobs')
    op.drop_table('device_tag_association')
    op.drop_table('device_configurations')
    op.drop_table('credential_tag_association')
    op.drop_index(op.f('ix_tags_name'), table_name='tags')
    op.drop_table('tags')
    op.drop_index(op.f('ix_system_settings_key'), table_name='system_settings')
    op.drop_table('system_settings')
    op.drop_index(op.f('ix_devices_hostname'), table_name='devices')
    op.drop_table('devices')
    op.drop_table('credentials')
    op.drop_table('users')
    # ### end Alembic commands ###
