// filepath: /home/netops/Projects2025/python/netraven/frontend/src/pages/ConfigSnapshots.vue
<template>
  <div class="space-y-4">
    <PageContainer title="Configuration Snapshots">
      <template #actions>
        <button
          @click="refreshData"
          class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md shadow-sm text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
          :disabled="isLoading"
        >
          <ArrowPathIcon v-if="!isLoading" class="w-4 h-4 mr-1" />
          <ArrowPathIcon v-else class="w-4 h-4 mr-1 animate-spin" />
          Refresh
        </button>
      </template>
      
      <!-- Search & Filter Bar -->
      <SearchBar
        :initial-search-query="filters.query"
        :initial-device-id="filters.deviceId"
        :initial-start-date="filters.startDate"
        :initial-end-date="filters.endDate"
        :devices="devices"
        @search="handleSearch"
        @update:search-query="filters.query = $event"
        @update:device-id="filters.deviceId = $event"
        @update:start-date="filters.startDate = $event"
        @update:end-date="filters.endDate = $event"
      />
      
      <!-- Snapshots Table -->
      <NrCard>
        <SnapshotsTable
          :snapshots="snapshots"
          :loading="isLoading"
          :page="pagination.currentPage"
          :per-page="pagination.perPage"
          :total-snapshots="pagination.total"
          @view="handleViewSnapshot"
          @diff="handleDiffSnapshot"
          @download="handleDownloadSnapshot"
          @sort="handleSort"
          @page-change="handlePageChange"
        />
      </NrCard>
    </PageContainer>

    <!-- View Snapshot Modal -->
    <BaseModal :is-open="viewModalOpen" title="Configuration Snapshot" @close="closeViewModal">
      <template #content>
        <div v-if="selectedSnapshot" class="space-y-2">
          <div class="mb-3">
            <div class="grid grid-cols-2 gap-2 text-sm">
              <div class="text-text-secondary">Device:</div>
              <div class="text-text-primary font-medium">{{ selectedSnapshot.device_name }}</div>
              <div class="text-text-secondary">Snapshot ID:</div>
              <div class="text-text-primary font-medium">{{ selectedSnapshot.id }}</div>
              <div class="text-text-secondary">Retrieved At:</div>
              <div class="text-text-primary font-medium">{{ formatDate(selectedSnapshot.retrieved_at) }}</div>
            </div>
          </div>
          <pre class="bg-card-secondary p-3 rounded text-xs font-mono text-text-primary overflow-auto max-h-96">{{ selectedSnapshot.snippet }}</pre>
        </div>
      </template>
      <template #actions>
        <button
          @click="closeViewModal"
          class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 focus:outline-none"
        >
          Close
        </button>
      </template>
    </BaseModal>
  </div>
</template>

<script setup>
import { ref, reactive, onMounted } from 'vue';
import { ArrowPathIcon } from '@heroicons/vue/24/solid';
import BaseModal from '../components/BaseModal.vue';
import SearchBar from '../components/backups/SearchBar.vue';
import SnapshotsTable from '../components/backups/SnapshotsTable.vue';
import { configSnapshotsService } from '../services/configSnapshots';
import { mockDevices, getPaginatedSnapshots } from '../mock/configSnapshots';

// State
const isLoading = ref(false);
const snapshots = ref([]);
const devices = ref(mockDevices);
const filters = reactive({
  query: '',
  deviceId: null,
  startDate: null,
  endDate: null
});
const pagination = reactive({
  currentPage: 1,
  perPage: 10,
  total: 0,
  totalPages: 1
});
const sorting = reactive({
  key: 'retrieved_at',
  order: 'desc'
});
const viewModalOpen = ref(false);
const selectedSnapshot = ref(null);

// Lifecycle hooks
onMounted(() => {
  fetchSnapshots();
});

// Methods
async function fetchSnapshots() {
  isLoading.value = true;
  
  try {
    // In a real implementation, this would call the API
    // const response = await configSnapshotsService.search(
    //   filters,
    //   pagination.currentPage,
    //   pagination.perPage,
    //   sorting
    // );
    
    // Using mock data instead
    const response = getPaginatedSnapshots({
      query: filters.query,
      deviceId: filters.deviceId,
      startDate: filters.startDate,
      endDate: filters.endDate,
      page: pagination.currentPage,
      perPage: pagination.perPage,
      sortBy: sorting.key,
      sortOrder: sorting.order
    });
    
    snapshots.value = response.snapshots;
    pagination.total = response.pagination.total;
    pagination.totalPages = response.pagination.total_pages;
    
    // Simulate network delay
    await new Promise(resolve => setTimeout(resolve, 500));
  } catch (error) {
    console.error('Failed to fetch snapshots:', error);
    // In a real implementation, we would use the notification store
    // notificationStore.showError('Failed to load configuration snapshots');
  } finally {
    isLoading.value = false;
  }
}

function handleSearch(searchParams) {
  // Update filters from search event
  Object.assign(filters, searchParams);
  pagination.currentPage = 1; // Reset to first page on new search
  fetchSnapshots();
}

function handleSort(sortParams) {
  sorting.key = sortParams.key;
  sorting.order = sortParams.order;
  fetchSnapshots();
}

function handlePageChange(page) {
  pagination.currentPage = page;
  fetchSnapshots();
}

function refreshData() {
  fetchSnapshots();
}

function formatDate(timestamp) {
  if (!timestamp) return '';
  const date = new Date(timestamp);
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: 'numeric',
    minute: '2-digit',
    hour12: true
  }).format(date);
}

// Modal handlers
function handleViewSnapshot(snapshot) {
  selectedSnapshot.value = snapshot;
  viewModalOpen.value = true;
}

function closeViewModal() {
  viewModalOpen.value = false;
  selectedSnapshot.value = null;
}

function handleDiffSnapshot(snapshot) {
  // This would be implemented in a future workstream
  console.log('Diff snapshot:', snapshot);
  // In a real implementation, we would navigate to a diff view
  // router.push(`/backups/configurations/${snapshot.device_id}/${snapshot.id}/diff`);
}

function handleDownloadSnapshot(snapshot) {
  // This would be implemented in a future workstream
  console.log('Download snapshot:', snapshot);
  // In a real implementation, we would call the API to download the snapshot
  // configSnapshotsService.downloadSnapshot(snapshot.device_id, snapshot.id)
  //   .then(response => {
  //     // Create a download link and trigger it
  //     const url = window.URL.createObjectURL(new Blob([response.data]));
  //     const link = document.createElement('a');
  //     link.href = url;
  //     link.setAttribute('download', `config_${snapshot.device_name}_${snapshot.id}.txt`);
  //     document.body.appendChild(link);
  //     link.click();
  //     document.body.removeChild(link);
  //   })
  //   .catch(error => {
  //     console.error('Failed to download snapshot:', error);
  //     notificationStore.showError('Failed to download configuration snapshot');
  //   });
}
</script>
