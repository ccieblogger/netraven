version: '3.8'

services:
  # Add Nginx as reverse proxy for development
  nginx:
    image: nginx:1.25
    container_name: netraven-nginx-dev
    ports:
      # Expose Nginx on port 80 to the host
      - "80:80"
    volumes:
      # Mount our custom configuration
      - ./docker/nginx/nginx.dev.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/security-headers.conf:/etc/nginx/conf.d/security-headers.conf
    depends_on:
      - frontend
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: netraven-frontend-dev
    ports:
      - "5173:5173"
    volumes:
      # Mount source code for live updates
      - ./frontend:/app
      # Use a named volume for node_modules to avoid overwriting with host directory
      - frontend-node-modules:/app/node_modules
    environment:
      - NODE_ENV=development
      # Update API URL to work with Nginx
      - VITE_API_URL=/api
    # Simplify command since we've verified Node.js works in the Dockerfile
    command: npm run dev
    # Update healthcheck to use internal network
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:5173 || exit 1
      interval: 30s  # Increased from 10s to 30s
      timeout: 10s   # Increased from 5s to 10s
      retries: 5
      start_period: 30s  # Give it 30s before starting health checks
    # Ensure container restarts if it fails
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile.dev
    container_name: netraven-api-dev
    ports:
      - "8000:8000"
    volumes:
      # Mount source code for live updates
      - .:/app
      # Mount host log directory for file-based logging
      - ./host-logs/netraven/api:/data/logs/api
    env_file:
      - .env.dev
    environment:
      - NETRAVEN_ENV=dev
      - NETRAVEN_DATABASE__URL=postgresql+psycopg2://netraven:netraven@postgres:5432/netraven
      - NETRAVEN_SCHEDULER__REDIS_URL=redis://redis:6379/0
      - NETRAVEN_SECURITY__ENCRYPTION_KEY=dev_encryption_key_replace_in_production
      - NETRAVEN_SECURITY__ENCRYPTION_SALT=dev_encryption_salt_replace_in_production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  postgres:
    image: postgres:14
    container_name: netraven-postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=netraven
      - POSTGRES_PASSWORD=netraven
      - POSTGRES_DB=netraven
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U netraven"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  redis:
    image: redis:7.0
    container_name: netraven-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  worker:
    build:
      context: .
      dockerfile: docker/api/Dockerfile.dev
    container_name: netraven-worker-dev
    command: ["worker"]
    depends_on:
      - redis
      - postgres
    environment:
      - NETRAVEN_ENV=dev
      - NETRAVEN_DATABASE__URL=postgresql+psycopg2://netraven:netraven@postgres:5432/netraven
      - NETRAVEN_SCHEDULER__REDIS_URL=redis://redis:6379/0
      - NETRAVEN_SECURITY__ENCRYPTION_KEY=dev_encryption_key_replace_in_production
      - NETRAVEN_SECURITY__ENCRYPTION_SALT=dev_encryption_salt_replace_in_production
      - NETRAVEN_LOGGING__FILE__PATH=/data/logs/worker/worker.log
    # Custom healthcheck: checks RQ worker process and Redis connectivity
    healthcheck:
      test: ["CMD", "/app/worker_healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Mount host log directory for file-based logging
    volumes:
      - ./host-logs/netraven/worker:/data/logs/worker

  scheduler:
    build:
      context: .
      dockerfile: docker/api/Dockerfile.dev
    container_name: netraven-scheduler-dev
    entrypoint: ["/app/docker/api/entrypoint.sh", "scheduler"]
    depends_on:
      - redis
      - postgres
    environment:
      - NETRAVEN_ENV=dev
      - NETRAVEN_DATABASE__URL=postgresql+psycopg2://netraven:netraven@postgres:5432/netraven
      - NETRAVEN_SCHEDULER__REDIS_URL=redis://redis:6379/0
      - NETRAVEN_LOGGING__FILE__PATH=/data/logs/scheduler/scheduler.log
    volumes:
      - ./host-logs/netraven/scheduler:/data/logs/scheduler
    healthcheck:
      test: ["CMD", "pgrep", "-f", "netraven.scheduler.scheduler_runner"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  frontend-node-modules:
  redis-data:
  postgres-data:
