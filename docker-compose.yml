# This file defines the production deployment configuration for NetRaven.
# It includes services for the database, API, scheduler, gateway, and frontend.

services:
  # PostgreSQL database service
  postgres:
    image: postgres:14-alpine
    volumes:
      - type: volume
        source: postgres-data
        target: /var/lib/postgresql/data
      - type: bind
        source: ./scripts/init-db.sql
        target: /docker-entrypoint-initdb.d/init-db.sql
        read_only: true
    ports:
      - "5432:5432"
    restart: unless-stopped
    environment:
      POSTGRES_USER: netraven
      POSTGRES_PASSWORD: netraven
      POSTGRES_DB: netraven
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U netraven"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - netraven-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Backend API service
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
      args:
        NETRAVEN_ENV: ${NETRAVEN_ENV:-prod}
    environment:
      DATABASE_URL: postgresql://netraven:netraven@postgres:5432/netraven
      POSTGRES_HOST: postgres
      POSTGRES_USER: netraven
      POSTGRES_PASSWORD: netraven
      POSTGRES_DB: netraven
      TOKEN_SECRET_KEY: ${TOKEN_SECRET_KEY:-netraven-dev-secret-key}
      TOKEN_EXPIRY_HOURS: ${TOKEN_EXPIRY_HOURS:-24}
      NETRAVEN_ENV: ${NETRAVEN_ENV:-prod}
      GATEWAY_URL: http://device_gateway:8001
      CORS_ORIGINS: http://localhost:8080,http://127.0.0.1:8080,http://localhost,http://127.0.0.1,http://nginx,http://netraven.local,*
      ALLOW_CREDENTIALS: "true"
      NETMIKO_LOG_DIR: /app/data/netmiko_logs
      NETMIKO_PRESERVE_LOGS: ${NETMIKO_PRESERVE_LOGS:-false}
      SERVICE_TYPE: api
    volumes:
      - type: volume
        source: api-data
        target: /app/data
      - type: volume
        source: token_data
        target: /app/tokens
      - type: volume
        source: logs_data
        target: /app/logs
      - type: bind
        source: ./test-artifacts
        target: /app/test-artifacts
      - type: bind
        source: ./config.yml
        target: /app/config.yml
        read_only: true
      - type: volume
        source: netraven_netmiko_logs
        target: /app/data/netmiko_logs
      - type: bind
        source: ./netraven
        target: /app/netraven
        read_only: true
      - type: bind
        source: ./scripts
        target: /app/scripts
        read_only: true
    ports:
      - "0.0.0.0:8000:8000"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/api/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - netraven-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /run
    entrypoint: ["/bin/bash", "-c", "python /app/scripts/ensure_schema.py && /app/docker/entrypoint.sh"]

  # Scheduler service
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile.api
      args:
        NETRAVEN_ENV: ${NETRAVEN_ENV:-test}
    user: root
    volumes:
      - type: volume
        source: logs_data
        target: /app/logs
      - type: volume
        source: netraven_netmiko_logs
        target: /app/data/netmiko_logs
      - type: bind
        source: ./netraven
        target: /app/netraven
        read_only: true
      - type: bind
        source: ./scripts
        target: /app/scripts
        read_only: true
      - type: bind
        source: ./config.yml
        target: /app/config.yml
        read_only: true
    working_dir: /app
    command: bash -c "mkdir -p /app/data/netmiko_logs /app/logs && chmod -R 777 /app/logs /app/data/netmiko_logs && python -m netraven.jobs.scheduler"
    environment:
      API_URL: http://api:8000
      NETRAVEN_ENV: ${NETRAVEN_ENV:-test}
      NETMIKO_LOG_DIR: /app/data/netmiko_logs
      NETMIKO_PRESERVE_LOGS: ${NETMIKO_PRESERVE_LOGS:-false}
      SERVICE_TYPE: scheduler
      PYTHONPATH: /app
    depends_on:
      postgres:
        condition: service_healthy
      api:
        condition: service_healthy
      device_gateway:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - netraven-network
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
      - /run

  # Device Gateway service
  device_gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
      args:
        NETRAVEN_ENV: ${NETRAVEN_ENV:-prod}
    ports:
      - "8001:8001"
    volumes:
      - type: bind
        source: ./netraven
        target: /app/netraven
        read_only: true
      - type: volume
        source: token_data
        target: /app/tokens
      - type: bind
        source: ./config.yml
        target: /app/config.yml
        read_only: true
      - type: volume
        source: netraven_netmiko_logs
        target: /app/data/netmiko_logs
      - type: bind
        source: ./scripts
        target: /app/scripts
        read_only: true
    environment:
      API_URL: http://api:8000
      NETRAVEN_ENV: ${NETRAVEN_ENV:-prod}
      NETMIKO_LOG_DIR: /app/data/netmiko_logs
      NETMIKO_PRESERVE_LOGS: ${NETMIKO_PRESERVE_LOGS:-false}
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /run
    networks:
      - netraven-network

  # Frontend service
  frontend:
    build:
      context: ./netraven/web/frontend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - api
      - device_gateway
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "--tries=1", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      NODE_ENV: production
      VUE_APP_API_URL: http://api:8000
    networks:
      - netraven-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run
    volumes:
      - type: bind
        source: ./docker/nginx/frontend-nginx.conf
        target: /etc/nginx/conf.d/default.conf
        read_only: true

  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - api
      - frontend
    networks:
      - netraven-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run

  key-rotation:
    build:
      context: .
      dockerfile: docker/key-rotation.Dockerfile
      args:
        NETRAVEN_ENV: ${NETRAVEN_ENV:-prod}
    volumes:
      - type: volume
        source: key_data
        target: /app/data/keys
      - type: bind
        source: ./config
        target: /app/config
        read_only: true
    restart: on-failure:5
    environment:
      NETRAVEN_ENV: ${NETRAVEN_ENV:-prod}
      NETRAVEN_ENCRYPTION_KEY: ${NETRAVEN_ENCRYPTION_KEY:-netraven-dev-key}
      CONFIG_FILE: config/key_rotation.yaml
    networks:
      - netraven-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

volumes:
  frontend_node_modules:
    driver: local
  postgres-data:
    driver: local
  logs_data:
    driver: local
  token_data:
    driver: local
  api-data:
    driver: local
  key_data:
    driver: local
  netraven_netmiko_logs:
    driver: local

networks:
  netraven-network:
    driver: bridge