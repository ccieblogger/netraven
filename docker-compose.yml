version: '3'

services:
  # PostgreSQL database service
  postgres:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    restart: unless-stopped
    environment:
      - POSTGRES_USER=netraven
      - POSTGRES_PASSWORD=netraven
      - POSTGRES_DB=netraven
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U netraven"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - netraven-network

  # Backend API service
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
      args:
        - NETRAVEN_ENV=${NETRAVEN_ENV:-prod}
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=netraven
      - POSTGRES_PASSWORD=netraven
      - POSTGRES_DB=netraven
      - NETRAVEN_ENV=${NETRAVEN_ENV:-prod}
      - GATEWAY_URL=http://device_gateway:8001
    volumes:
      - api-data:/app/data
      - ./test-artifacts:/app/test-artifacts
    ports:
      - "8000:8000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - netraven-network

  # Scheduler service
  scheduler:
    image: python:3.10-slim
    volumes:
      - ./netraven:/app/netraven
      - logs_data:/app/logs
    working_dir: /app
    command: bash -c "cd /app && python -m netraven.scheduler.main"
    environment:
      - API_URL=http://api:8000
      - NETRAVEN_ENV=${NETRAVEN_ENV:-prod}
    depends_on:
      postgres:
        condition: service_healthy
      api:
        condition: service_healthy
      device_gateway:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - netraven-network

  # Device Gateway service
  device_gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
      args:
        - NETRAVEN_ENV=${NETRAVEN_ENV:-prod}
    ports:
      - "8001:8001"
    volumes:
      - ./netraven:/app/netraven
      - token_data:/app/tokens
      - ./config.yml:/app/config.yml
    environment:
      - API_URL=http://api:8000
      - NETRAVEN_ENV=${NETRAVEN_ENV:-prod}
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    security_opt:
      - no-new-privileges:true
    networks:
      - netraven-network

  # Frontend service
  frontend:
    build:
      context: ./netraven/web/frontend
      dockerfile: Dockerfile
      args:
        - NETRAVEN_ENV=${NETRAVEN_ENV:-prod}
    volumes:
      - ./netraven/web/frontend:/app
      # Use a named volume for node_modules to prevent overwriting
      - frontend_node_modules:/app/node_modules
    ports:
      - "8080:8080"
    depends_on:
      - api
      - device_gateway
    environment:
      - API_URL=http://api:8000
      - NETRAVEN_ENV=${NETRAVEN_ENV:-prod}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 3
    # Non-root user for security
    user: "1001:1001"
    networks:
      - netraven-network

volumes:
  frontend_node_modules:
  postgres_data:
  logs_data:
  token_data:
  api-data:

networks:
  netraven-network:
    driver: bridge 