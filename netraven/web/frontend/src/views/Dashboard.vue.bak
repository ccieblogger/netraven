<template>
  <MainLayout>
    <div class="p-6 bg-white rounded-lg shadow">
      <h1 class="text-2xl font-bold mb-4">NetRaven Dashboard</h1>
      <p class="mb-4">If you can see this, the basic rendering is working.</p>
      
      <div class="bg-yellow-100 p-4 rounded mb-4">
        <h2 class="font-bold mb-2">Debug Info:</h2>
        <pre class="text-xs">{{ debugInfo }}</pre>
      </div>
      
      <div v-if="isBrowserWarning" class="bg-blue-100 border border-blue-400 text-blue-700 p-4 mb-4 rounded">
        <h3 class="font-bold">Browser Information</h3>
        <p>You are using Microsoft Edge. Basic functionality should work, but if you encounter any issues:</p>
        <p class="mt-2">1. Try our debug page for detailed diagnostics</p>
        <p>2. Consider using Chrome for the most tested experience</p>
        <a href="/debug.html" class="text-blue-600 underline mt-2 inline-block">Go to Debug Page</a>
      </div>
      
      <div class="flex gap-2 mb-6">
        <button @click="testClick" class="bg-blue-600 text-white px-4 py-2 rounded">
          Test Button
        </button>
        <button @click="goToDebugPage" class="bg-gray-600 text-white px-4 py-2 rounded">
          Debug Page
        </button>
        <button @click="testLocalStorage" class="bg-green-600 text-white px-4 py-2 rounded">
          Test Storage
        </button>
      </div>
      
      <nav class="mt-6 border-t pt-4">
        <h3 class="font-bold mb-2">Navigation</h3>
        <div class="flex flex-wrap gap-2">
          <a href="/" class="bg-blue-100 px-3 py-1 rounded">Dashboard</a>
          <a href="/devices" class="bg-blue-100 px-3 py-1 rounded">Devices</a>
          <a href="/backups" class="bg-blue-100 px-3 py-1 rounded">Backups</a>
          <a href="/tags" class="bg-blue-100 px-3 py-1 rounded">Tags</a>
          <a href="/tag-rules" class="bg-blue-100 px-3 py-1 rounded">Tag Rules</a>
        </div>
      </nav>
    </div>
  </MainLayout>
</template>

<script>
import MainLayout from '../components/MainLayout.vue'
import { ref, computed, onMounted } from 'vue'

export default {
  name: 'Dashboard',
  components: {
    MainLayout
  },
  
  setup() {
    // Count statistics
    const deviceCount = ref(0)
    const backupCount = ref(0)
    const tagCount = ref(0)
    
    // Devices table data
    const devices = ref([
      {
        id: 1,
        hostname: 'Router-01',
        ip_address: '192.168.1.1',
        type: 'Router',
        status: 'Online',
        last_backup: '2023-03-12 14:30'
      },
      {
        id: 2,
        hostname: 'Switch-03',
        ip_address: '192.168.1.3',
        type: 'Switch',
        status: 'Online',
        last_backup: '2023-03-13 09:15'
      },
      {
        id: 3,
        hostname: 'Firewall-02',
        ip_address: '192.168.1.2',
        type: 'Firewall',
        status: 'Warning',
        last_backup: '2023-03-10 16:45'
      },
      {
        id: 4,
        hostname: 'AP-01',
        ip_address: '192.168.1.4',
        type: 'Access Point',
        status: 'Offline',
        last_backup: '2023-03-05 11:20'
      },
      {
        id: 5,
        hostname: 'Server-01',
        ip_address: '192.168.1.10',
        type: 'Server',
        status: 'Online',
        last_backup: '2023-03-13 08:00'
      }
    ])
    
    // Debug state
    const testResult = ref(null)
    const storageTest = ref(null)
    const showDebugInfo = ref(false)
    
    // Sample recent activity - in a real app, this would come from an API
    const recentActivity = ref([
      { action: 'Backup created', item: 'Router-01', time: '10 minutes ago' },
      { action: 'Device added', item: 'Switch-03', time: '2 hours ago' },
      { action: 'Tag created', item: 'Production', time: '1 day ago' },
      { action: 'Configuration changed', item: 'Firewall-02', time: '2 days ago' }
    ])
    
    // Simulate fetching data
    onMounted(() => {
      // In a real app, these would be API calls
      fetchSummaryData()
      
      // Check URL parameters for debug mode
      const urlParams = new URLSearchParams(window.location.search)
      if (urlParams.get('debug') === 'true') {
        showDebugInfo.value = true
      }
    })
    
    // Simulates fetching data from an API
    const fetchSummaryData = () => {
      // This would normally be API calls
      setTimeout(() => {
        deviceCount.value = 12
        backupCount.value = 47
        tagCount.value = 8
      }, 500)
    }
    
    // Get appropriate CSS class based on device status
    const getStatusClass = (status) => {
      switch (status.toLowerCase()) {
        case 'online':
          return 'text-green-600 font-medium'
        case 'offline':
          return 'text-red-600 font-medium'
        case 'warning':
          return 'text-yellow-600 font-medium'
        default:
          return 'text-gray-600'
      }
    }
    
    // Create a backup for a device
    const createBackup = (deviceId) => {
      // This would normally trigger an API call
      console.log(`Creating backup for device ${deviceId}`)
      alert(`Backup initiated for device ID: ${deviceId}`)
    }
    
    const isBrowserWarning = computed(() => {
      return navigator.userAgent.indexOf("Edg/") > -1
    })
    
    const browserInfo = computed(() => {
      const ua = navigator.userAgent
      let browser = "Unknown"
      
      if (ua.indexOf("Chrome") > -1 && ua.indexOf("Edg/") === -1) {
        browser = "Chrome"
      } else if (ua.indexOf("Edg/") > -1) {
        browser = "Edge"
      } else if (ua.indexOf("Firefox") > -1) {
        browser = "Firefox"
      } else if (ua.indexOf("Safari") > -1) {
        browser = "Safari"
      }
      
      return {
        browser,
        userAgent: ua,
        platform: navigator.platform
      }
    })
    
    const debugInfo = computed(() => {
      return {
        currentUrl: window.location.href,
        pathName: window.location.pathname,
        hasToken: !!localStorage.getItem('access_token'),
        testResult: testResult.value,
        storageTest: storageTest.value,
        browser: browserInfo.value
      }
    })
    
    const toggleDebugInfo = () => {
      showDebugInfo.value = !showDebugInfo.value
    }
    
    const testClick = () => {
      testResult.value = 'Button clicked at ' + new Date().toLocaleTimeString()
    }
    
    const testLocalStorage = () => {
      try {
        const testKey = 'dashboard_test_' + Date.now()
        localStorage.setItem(testKey, 'Test value')
        const readValue = localStorage.getItem(testKey)
        localStorage.removeItem(testKey)
        
        storageTest.value = {
          success: readValue === 'Test value',
          value: readValue,
          timestamp: new Date().toISOString()
        }
      } catch (error) {
        storageTest.value = {
          success: false,
          error: error.message,
          timestamp: new Date().toISOString()
        }
      }
    }
    
    const goToDebugPage = () => {
      window.location.href = '/debug.html'
    }
    
    return {
      deviceCount,
      backupCount,
      tagCount,
      devices,
      recentActivity,
      testResult,
      storageTest,
      showDebugInfo,
      isBrowserWarning,
      browserInfo,
      debugInfo,
      toggleDebugInfo,
      testClick,
      testLocalStorage,
      goToDebugPage,
      getStatusClass,
      createBackup
    }
  }
}
</script> 